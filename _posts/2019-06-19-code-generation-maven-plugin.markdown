---
layout: post
title: 写一个简单易用扩展性高的代码生成器Maven插件
date: 2019-6-19 17:12:25 +0800
description: "本篇文章主要讲代码生成器的产生背景，代码生成器在后端项目中的主要作用，如何写一个好用的代码生成器"
img:
tags:
---

## 为什么要写一个代码生成器
在写后端项目的时候，基础的实现功能都是增删查改，通常以表或者指定的数据模型为单位进行增删查改。  

在大部分的javaWeb项目中，通常写一个增删查改需要新建很多个基础类。

假设你的项目是由 控制层、服务层、数据访问层组成，那么如果新增一个表的增删查改功能，我们就也许需要针对这个表创建以下这些类。
```
Model.java
ModelController.java
IModelService.java
ModelService.java
IModelDao.java
ModelDao.java
```

创建完成后，某些项目结构是有通用的基础类，可能还需要根据Model类型来添加泛型，这样又是需要一顿复制粘贴的操作。
```java 
interface IModelService extends IBaseService<Model,Long> {}
class ModelService extends BaseService<Model,Long> implements IModelService {}
interface IModelDao extends IBaseDao<Model,Long> {}
class ModelDao extends BaseDao<Model,Long> implements IModelDao {}
```

当然每个公司的项目结构都不同，以上操作可能有多有少，但是对于一个后台系统来说，大量类似的增删查改类是少不了的。
如果你的项目结构是无规律的，那么代码生成器可能不太适合你

## 代码生成器的级别
1. 复制粘贴型代码生成器
顾名思义，最简单也是用的最多的方式，直接将现有的其他类似文件复制一份，改一改关键信息即可。成本最低，耗时根据项目需要复制的文件决定。有可能因为少改某些内容导致代码异常。

总的来说，通过复制粘贴的方式来生成代码，简单易用，无学习成本，但是比较容易出错，有一定修改成本，耗时和文件数量、修改内容成正比。

2. 框架自带代码生成器
通常和框架绑定，对于已有的系统难以植入，局限性高。生成的代码格式较为单一，很难做到一键使用。

3. 自定义代码生成器（本文所用的方式）
因为大部分系统的代码结构比较统一，但又有些不同，所以在市场上没有适合自己的生成器的时候，我们就会选择自己写一个，通过直接执行`main`方法来生成文件，定义几个参数，在需要生成的时候进行修改执行。

本文主要介绍这种方式，并且说一说如何通过这样的方式写一个 maven 插件，来让代码生成器配置简单化，易于移至，多系统多项目简单方便的使用。

## 自定义代码生成器maven插件 
代码生成器的原理，大体就是根据指定的模板，传入动态的参数，生成不同的代码。 

`simple-codegen` 使用freemarker作为模板引擎，结合maven插件，使参数配置简单化， 并且多项目使用只需要添加插件依赖，并且修改制定参数，定制好模板，即可一键生成代码。

因为模板可以根据项目自定义，所以基本所有情况下，只需要定义好模板，即可开始使用，未来还将支持
1. 读取表结构作为参数
2. 调用接口作为参数
3. 调用本地代码作为参数

## 代码生成器代码解析

## Maven插件教程
